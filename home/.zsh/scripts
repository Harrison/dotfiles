# need the host name set sometimes
[ -z "$HOSTNAME" ] && export HOSTNAME=$(hostname)

sknife() {
    KNIFE_ENV=staging knife $@
}

pknife() {
    KNIFE_ENV=production knife $@
}

be() {
    if [ -e ./Gemfile ] ; then
        echo "bundle exec $@"
        bundle exec $@
    else
        echo "$@"
        $@
    fi
}

# preserve the X environment variables
store_display() {
        export | grep '\(DISPLAY\|XAUTHORITY\)=' > ~/.display.${HOSTNAME}
}

# read out the X environment variables
update_display() {
        [ -r ~/.display.${HOSTNAME} ] && source ~/.display.${HOSTNAME}
}


# WINDOW is set when we are in a screen session
if [ -n "$WINDOW" ] ; then
        # update the display variables right away
        update_display

        # setup the preexec function to update the variables before each command
        preexec () {
                update_display
        }
fi

# this will reset the ssh-auth-sock link and screen display file before we run screen
_screen_prep() {
        if [ "$SSH_AUTH_SOCK" != "$HOME/.screen/ssh-auth-sock.$HOSTNAME" ] ; then
                ln -fs "$SSH_AUTH_SOCK" "$HOME/.screen/ssh-auth-sock.$HOSTNAME"
        fi
        store_display
}
alias screen='_screen_prep ; screen'

# Create a new directory and enter it
function md() {
        mkdir -p "$@" && cd "$@"
}


# find shorthand
function f() {
    find . -name "$1"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
        local port="${1:-8000}"
        open "http://localhost:${port}/"
        # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
        # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
        python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
function httpcompression() {
        encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# Syntax-highlight JSON strings or files
function json() {
        if [ -p /dev/stdin ]; then
                # piping, e.g. `echo '{"foo":42}' | json`
                python -mjson.tool | pygmentize -l javascript
        else
                # e.g. `json '{"foo":42}'`
                python -mjson.tool <<< "$*" | pygmentize -l javascript
        fi
}


# get gzipped size
function gz() {
        echo "orig size    (bytes): "
        cat "$1" | wc -c
        echo "gzipped size (bytes): "
        gzip -c "$1" | wc -c
}

# All the dig info
function digga() {
        dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
        printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
        echo # newline
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
        perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
        echo # newline
}
