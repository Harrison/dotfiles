# find shorthand
f() {
  find . -name "$1"
}

# Start an HTTP server from a directory, optionally specifying the port
static-server() {
  local port="${1:-8000}"
  open "http://localhost:${port}/"
  python3 -m http.server $port
}

chrome() {
  /Applications/Google\ Chrome\ Canary.app/Contents/MacOS/Google\ Chrome\ Canary \
      --js-flags="--trace-opt --trace-deopt --trace-bailout" \
      --allow-file-access \
      --disable-web-security \
      --remote-debugging-port=9222 \
      --js-flags=--harmony
}

branch() {
  if [ ! "$1" ]
  then
    echo "You must provide a branch name"
    return
  fi

  git checkout master
  git pull
  git checkout -b $USER/$1
}

branch-main() {
  if [ ! "$1" ]
  then
    echo "You must provide a branch name"
    return
  fi

  git checkout main
  git pull
  git checkout -b $USER/$1
}

rebase-master() {
  git fetch origin
  git rebase --interactive --autostash --autosquash origin/master
}

rebase-main() {
  git fetch origin
  git rebase --interactive --autostash --autosquash origin/main
}

rebase-continue() {
  git add --all
  git commit --no-edit
  git rebase --continue
}

# Find processes running on port
open-port() {
  lsof -Pn -i4 | grep $1
}

cop-changed() {
  git ls-files -m | xargs ls -1 2>/dev/null | grep '\.rb$' | xargs rubocop
}

cop-master() {
  git diff-tree -r --no-commit-id --name-only head origin/master | grep '\.rb$' | xargs rubocop
}

cop-main() {
  git diff-tree -r --no-commit-id --name-only head origin/main | grep '\.rb$' | xargs rubocop
}

cop-upstream() {
  git diff-tree -r --no-commit-id --name-only @\{u\} head | grep '\.rb$' | xargs rubocop
}

rspec-changed() {
  git ls-files -m | xargs ls -1 2>/dev/null | grep '\_spec\.rb$' | xargs rspec
}

rspec-master() {
  git diff-tree -r --no-commit-id --name-only head origin/master | grep '\_spec\.rb$' | xargs rspec
}

rspec-main() {
  git diff-tree -r --no-commit-id --name-only head origin/main | grep '\_spec\.rb$' | xargs rspec
}

rspec-upstream() {
  git diff-tree -r --no-commit-id --name-only @\{u\} head | grep '\_spec\.rb$' | xargs rspec
}

npm-init() {
  npm init --force --yes
}

git-init-npm() {
  git init --quiet
  touch .gitignore
  echo "node_modules" >> .gitignore
  git add -A
  git commit -m "Initial"
}

pdf-svg() {
  pdf_path="$1"
  svg_path="${1//pdf/svg}"
  inkscape --without-gui $pdf_path --export-plain-svg=$svg_path
  svgo $svg_path
}

gh-clone() {
  local repo="${1/https:\/\/github.com\//}"
  repo="${repo/git@github.com:/}"
  repo="${repo%.git}"
  if [[ ! "$repo" =~ ^[^/]+/[^/]+$ ]]; then
    echo "invalid repo - format must be ACCOUNT/NAME"
    return
  fi

  local dest="$HOME/src/github.com/$repo"
  if [ -e "$dest" ]; then
    echo "$dest: already exists"
    cd "$dest"
    return
  fi

  mkdir -p "$dest"
  git clone "git@github.com:$repo" "$dest"
  cd "$dest"
}

docker-debug() {
  if [ -z "$1" ]; then
    echo "usage: docker-debug CONTAINER-ID"
    return 1
  fi

  echo "Starting debug sidecar for container $1"

  [ ! -d "/tmp/debug-$1" ] && mkdir "/tmp/debug-$1"
  echo "Mounting /scratch to /tmp/debug-$1"

  docker run --rm -ti \
    --name="debug-${1:0:6}" \
    --workdir="/scratch" \
    --volume="/tmp/debug-$1:/scratch" \
    --pid="container:$1" \
    --network="container:$1" \
    --cap-add sys_admin \
    --cap-add sys_ptrace \
    hmarr/debug-tools
}

docker-debug-latest() {
  docker-debug "$(docker ps --latest --quiet)"
}
